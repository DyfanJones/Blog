<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Athena on Dyfan Jones Brain Dump HQ</title>
    <link>/tags/athena/</link>
    <description>Recent content in Athena on Dyfan Jones Brain Dump HQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Fri, 15 May 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/athena/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R doesn&#39;t need to throttle AWS Athena anymore</title>
      <link>/post/r-doesnt-need-to-throttle-aws-athena-anymore/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/r-doesnt-need-to-throttle-aws-athena-anymore/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;RBloggers&lt;/a&gt;|&lt;a href=&#34;https://feeds.feedburner.com/RBloggers&#34;&gt;RBloggers-feedburner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am happy to announce that &lt;code&gt;RAthena-1.9.0&lt;/code&gt; and &lt;code&gt;noctua-1.7.0&lt;/code&gt; have been released onto the cran. They both bring two key features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More stability when working with &lt;code&gt;AWS Athena&lt;/code&gt;, focusing on &lt;code&gt;AWS&lt;/code&gt; &lt;code&gt;Rate Exceeded&lt;/code&gt; throttling errors&lt;/li&gt;
&lt;li&gt;New helper function to convert &lt;code&gt;AWS S3&lt;/code&gt; backend files to save cost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;RAthena&lt;/code&gt; and &lt;code&gt;noctua&lt;/code&gt; features correspond to each other, as a result I will refer to them interchangeability.&lt;/p&gt;

&lt;h1 id=&#34;stability&#34;&gt;Stability&lt;/h1&gt;

&lt;h2 id=&#34;throttling-aws&#34;&gt;Throttling AWS&lt;/h2&gt;

&lt;p&gt;One of the main problems when working with &lt;code&gt;AWS&lt;/code&gt; API is stumbling into &lt;code&gt;Rate Exceeded&lt;/code&gt; throttling error. With the latest update to the packages, the connection between &lt;code&gt;AWS Athena&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; has been made more robust through retry functionality. This allows &lt;code&gt;R&lt;/code&gt; to automatically retry its request using an exponential backoff with jitter (&lt;a href=&#34;https://httr.r-lib.org/articles/api-packages.html#turn-api-errors-into-r-errors&#34;&gt;Best practices for API packages&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-05-15-r-doesnt-need-to-throttle-aws-athena-anymore_files/aws_retry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; sends a call to &lt;code&gt;AWS Athena&lt;/code&gt;, let&amp;rsquo;s say &lt;code&gt;dbListTables(con)&lt;/code&gt;. However &lt;code&gt;AWS&lt;/code&gt; is over run with requests, and returns an error back to &lt;code&gt;R&lt;/code&gt; saying it is overwhelmed (this is a &lt;code&gt;rate exceeded&lt;/code&gt; throttling error). As &lt;code&gt;RAthena&lt;/code&gt; and &lt;code&gt;noctua&lt;/code&gt; retry noisely, the error will be printed to the console letting you know &lt;code&gt;AWS&lt;/code&gt; is busy (&lt;code&gt;{expection message} + &amp;quot;Request failed. Retrying in &amp;quot; + {wait time}  + &amp;quot; seconds...&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; will then wait for a given time (please see error format above) and retry the request again. &lt;code&gt;AWS&lt;/code&gt; replies it is still busy and can&amp;rsquo;t do the request.&lt;/li&gt;
&lt;li&gt;This time &lt;code&gt;R&lt;/code&gt; will back off for a long period of time, this gives &lt;code&gt;AWS&lt;/code&gt; some breathing room. Now when &lt;code&gt;R&lt;/code&gt; sends the request over to &lt;code&gt;AWS&lt;/code&gt;, &lt;code&gt;AWS&lt;/code&gt; is able to complete the call and return out desired results.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This feature is a great step in the right direction for making &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;AWS Athena&lt;/code&gt; work together seamlessly. For anyone who wishes to create their own retry method both packages have enabled this through their &lt;code&gt;..._options()&lt;/code&gt; function. For more information please refer to &lt;a href=&#34;https://dyfanjones.github.io/noctua/articles/how_to_retry.html&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;save-the-pennies&#34;&gt;Save the pennies&lt;/h1&gt;

&lt;h2 id=&#34;converting-aws-s3-files&#34;&gt;Converting &lt;code&gt;AWS S3&lt;/code&gt; files&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;AWS Athena&lt;/code&gt; costs by the amount of data it scans. This makes it very important to have your &lt;code&gt;AWS S3&lt;/code&gt; backend files in the suitable format to reduce the cost of using &lt;code&gt;AWS Athena&lt;/code&gt;. This is where the next key feature comes in. This feature basically creates a simple wrapper to allow you to convert &lt;code&gt;AWS S3&lt;/code&gt; files into a more suitable format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
library(RAthena)

con &amp;lt;- dbConnect(athena())

# Upload iris data.frame to AWS Athena as a delimited file
dbWriteTable(con, &amp;quot;iris_delim&amp;quot;, iris)

# Convert to parquet using AWS Athena
dbConvertTable(con,
               obj = &amp;quot;iris_delim&amp;quot;,
               name = &amp;quot;iris_parquet&amp;quot;,
               file.type = &amp;quot;parquet&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example simply uploaded iris &lt;code&gt;data.frame&lt;/code&gt; to &lt;code&gt;AWS Athena&lt;/code&gt; in a default delimited file format (please see &lt;a href=&#34;https://dyfanjones.github.io/RAthena/reference/AthenaWriteTables.html&#34;&gt;link&lt;/a&gt; for more information around how to upload data to &lt;code&gt;AWS Athena&lt;/code&gt;). Then it is converted into &lt;a href=&#34;https://parquet.apache.org/&#34;&gt;&lt;code&gt;parquet&lt;/code&gt;&lt;/a&gt; file format using &lt;code&gt;AWS Athena&lt;/code&gt;. This wrapper isn&amp;rsquo;t limited to converting just AWS Athena tables, it can also convert &lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/select.html&#34;&gt;&lt;code&gt;SQL DML&lt;/code&gt;&lt;/a&gt; queries. Please refer to &lt;a href=&#34;https://dyfanjones.github.io/RAthena/reference/dbConvertTable.html&#34;&gt;&lt;code&gt;dbConvertTable&lt;/code&gt;&lt;/a&gt; for more documentation or to the &lt;code&gt;dbConvertTable&lt;/code&gt; vignette &lt;a href=&#34;https://dyfanjones.github.io/RAthena/articles/convert_and_save_cost.html&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally for more informations around best practises with &lt;code&gt;AWS Athena&lt;/code&gt; please look at &lt;a href=&#34;https://aws.amazon.com/blogs/big-data/top-10-performance-tuning-tips-for-amazon-athena/&#34;&gt;Top 10 Perfromace Tuning Tips for Amazon Athena&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;sum-up&#34;&gt;Sum Up&lt;/h1&gt;

&lt;p&gt;These two new features bring &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;AWS Athena&lt;/code&gt; that little bit closer together. As always if you have any new features or identify any bugs please feel free to raise a pull request or ticket on the corresponding package github pages (&lt;a href=&#34;https://github.com/DyfanJones/RAthena/&#34;&gt;&lt;code&gt;RAthena&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/DyfanJones/noctua&#34;&gt;&lt;code&gt;nocuta&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;
</description>
      
                  <category>R</category>
      
                  <category>Athena</category>
      
                  <category>Boto3</category>
      
                  <category>paws1150</category>
      
                  <category>Python</category>
      
      
            <category>RBloggers</category>
      
    </item>
    
    <item>
      <title>The next package release into AWS Athena</title>
      <link>/post/the-next-package-release-into-aws-athena/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/the-next-package-release-into-aws-athena/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;RBloggers&lt;/a&gt;|&lt;a href=&#34;https://feeds.feedburner.com/RBloggers&#34;&gt;RBloggers-feedburner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RAthena 1.7.1&lt;/code&gt; and &lt;code&gt;noctua 1.5.1&lt;/code&gt; package versions have now been released to the CRAN. They both bring along several improvements with the connection to &lt;code&gt;AWS Athena&lt;/code&gt;, noticeably the performance speed and several creature comforts.&lt;/p&gt;

&lt;p&gt;These packages have both been designed to reflect one another,even down to how they connect to &lt;code&gt;AWS Athena&lt;/code&gt;. This means that all features going forward will exist in both packages. I will refer to these packages as one, as they basically work in the same way.&lt;/p&gt;

&lt;h1 id=&#34;performance-improvements&#34;&gt;Performance improvements:&lt;/h1&gt;

&lt;p&gt;Initially the packages utilised &lt;code&gt;AWS Athena&lt;/code&gt; SQL queries. This was to achieve all the functional requirements of the &lt;code&gt;DBI&lt;/code&gt; package framework. However the package would always send a SQL query to &lt;code&gt;AWS Athena&lt;/code&gt; which in turn would have to lift a flat file from &lt;code&gt;AWS S3&lt;/code&gt;, before returning the final result to &lt;code&gt;R&lt;/code&gt;. This means the performance of the packages would be limited and fairly slow compared to other data base backends.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-02-22-the-next-package-release-into-aws-athena_files/r-athena-old.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The biggest change is the adoption of more functionality of the SDKs (software development kit) into AWS. The key component that has been adopted is &lt;code&gt;AWS Glue&lt;/code&gt;. &lt;code&gt;AWS Glue&lt;/code&gt; contains all of &lt;code&gt;AWS Athena&lt;/code&gt; table DDL&amp;rsquo;s. This means instead of going to &lt;code&gt;AWS Athena&lt;/code&gt; for this information &lt;code&gt;AWS Glue&lt;/code&gt; can be used instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-02-22-the-next-package-release-into-aws-athena_files/r-athena-new.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;By utilising &lt;code&gt;AWS Glue&lt;/code&gt;, the table meta data (column names, column types, schema hierarchy etc&amp;hellip;) can easily be retrieved at a fraction of the time it would of taken to query &lt;code&gt;AWS Athena&lt;/code&gt;. Previously the &lt;code&gt;DBI&lt;/code&gt; function &lt;code&gt;dbListTables&lt;/code&gt; would send a query to &lt;code&gt;AWS Athena&lt;/code&gt;, this would retrieve all the tables listed in all schemas. This would take over 3 seconds. Now using &lt;code&gt;AWS Glue&lt;/code&gt; to retrieve the same data, it takes less than 0.5 of a second.&lt;/p&gt;

&lt;h2 id=&#34;dplyr&#34;&gt;dplyr&lt;/h2&gt;

&lt;p&gt;When &lt;code&gt;AWS Glue&lt;/code&gt; is used to collect metadata around a table in &lt;code&gt;AWS Athena&lt;/code&gt;, a performance in &lt;code&gt;dplyr::tbl&lt;/code&gt; can be done. I would like to say thanks to @OssiLehtinen for developing the initial implementation as this improvement would have been overlooked.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dplyr::tbl&lt;/code&gt; has two key methods when creating the initial object. The first is called SQL identifiers and this is the method that benefits from the new &lt;code&gt;AWS Glue&lt;/code&gt; functionality. To use SQL identifiers is fairly straight forward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
library(dplyr)
library(RAthena) #Or library(noctua)

con = dbConnect(athena())

dbWriteTable(con, &amp;quot;iris&amp;quot;, iris)

ident_iris = tbl(con, &amp;quot;iris&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;dplyr&lt;/code&gt; can identify the &lt;code&gt;iris&lt;/code&gt; table within the connected schema. When a user uses the SQL identifier method in &lt;code&gt;dplyr::tbl&lt;/code&gt;, &lt;code&gt;AWS Glue&lt;/code&gt; is called to retrieve all the meta data for &lt;code&gt;dplyr&lt;/code&gt;. This increases the performance from 3.66 to 0.29 seconds. The second method is called SQL sub query. This unfortunately won&amp;rsquo;t benefit from the new feature and will run in slower at 3.66 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subquery_iris = tbl(con, sql(&amp;quot;select * from iris&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Therefore I recommend the use of SQL identifier method when using &lt;code&gt;dplyr&#39;s&lt;/code&gt; interface.&lt;/p&gt;

&lt;h1 id=&#34;creature-comforts&#34;&gt;Creature Comforts&lt;/h1&gt;

&lt;h2 id=&#34;aws-athena-metadata&#34;&gt;AWS Athena Metadata&lt;/h2&gt;

&lt;p&gt;Due to user feature requests the packages now return more meta data around each query sent to &lt;code&gt;AWS Athena&lt;/code&gt;. Thus the basic level of meta data returned, is the amount of data scanned by &lt;code&gt;AWS Athena&lt;/code&gt;. This is formatted into a readable format depending on the amount of data scanned.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
library(RAthena) #Or library(noctua)

con = dbConnect(athena())

dbWriteTable(con, &amp;quot;iris&amp;quot;, iris)

dbGetQuery(con, &amp;quot;select * from iris&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Info: (Data scanned: 860 Bytes)
     sepal_length sepal_width petal_length petal_width   species
  1:          5.1         3.5          1.4         0.2    setosa
  2:          4.9         3.0          1.4         0.2    setosa
  3:          4.7         3.2          1.3         0.2    setosa
  4:          4.6         3.1          1.5         0.2    setosa
  5:          5.0         3.6          1.4         0.2    setosa
 ---                                                            
146:          6.7         3.0          5.2         2.3 virginica
147:          6.3         2.5          5.0         1.9 virginica
148:          6.5         3.0          5.2         2.0 virginica
149:          6.2         3.4          5.4         2.3 virginica
150:          5.9         3.0          5.1         1.8 virginica
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However if you set the new parameter &lt;code&gt;statistics&lt;/code&gt; to &lt;code&gt;TRUE&lt;/code&gt; then all the metadata around that query is printed out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dbGetQuery(con, &amp;quot;select * from iris&amp;quot;, statistics = TRUE)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$EngineExecutionTimeInMillis
[1] 1568

$DataScannedInBytes
[1] 860

$DataManifestLocation
character(0)

$TotalExecutionTimeInMillis
[1] 1794

$QueryQueueTimeInMillis
[1] 209

$QueryPlanningTimeInMillis
[1] 877

$ServiceProcessingTimeInMillis
[1] 17

Info: (Data scanned: 860 Bytes)
     sepal_length sepal_width petal_length petal_width   species
  1:          5.1         3.5          1.4         0.2    setosa
  2:          4.9         3.0          1.4         0.2    setosa
  3:          4.7         3.2          1.3         0.2    setosa
  4:          4.6         3.1          1.5         0.2    setosa
  5:          5.0         3.6          1.4         0.2    setosa
 ---                                                            
146:          6.7         3.0          5.2         2.3 virginica
147:          6.3         2.5          5.0         1.9 virginica
148:          6.5         3.0          5.2         2.0 virginica
149:          6.2         3.4          5.4         2.3 virginica
150:          5.9         3.0          5.1         1.8 virginica
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can also be retrieved by using &lt;code&gt;dbStatistics&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;res = dbExecute(con, &amp;quot;select * from iris&amp;quot;)

# return query statistic
query_stats = dbStatistics(res)

# return query results
dbFetch(res)

# Free all resources
dbClearResult(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rjdbc-inspired-function&#34;&gt;&lt;code&gt;RJDBC&lt;/code&gt; inspired function&lt;/h2&gt;

&lt;p&gt;I have to give full credit to the package &lt;code&gt;RJDBC&lt;/code&gt; for inspiring me to create this function. &lt;code&gt;DBI&lt;/code&gt; has got a good function called &lt;code&gt;dbListTables&lt;/code&gt; that will list all the tables that are in &lt;code&gt;AWS Athena&lt;/code&gt;. However it won&amp;rsquo;t return to which schema each individual table is related to. To over come this &lt;code&gt;RJDBC&lt;/code&gt; has a excellent function called &lt;code&gt;dbGetTables&lt;/code&gt;. This function returns all the tables from &lt;code&gt;AWS Athena&lt;/code&gt; as a &lt;code&gt;data.frame&lt;/code&gt;. This has the advantage of detailing schema, table and table type. With the new integration into &lt;code&gt;AWS Glue&lt;/code&gt; this can be returned quickly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dbGetTables(con)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;      Schema             TableName      TableType
 1:  default             df_bigint EXTERNAL_TABLE
 2:  default                  iris EXTERNAL_TABLE
 3:  default               mtcars2 EXTERNAL_TABLE
 4:  default         nyc_taxi_2018 EXTERNAL_TABLE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This just makes it a little bit easier when working in different IDE&amp;rsquo;s for example &lt;code&gt;Jupyter&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;backend-option-changes&#34;&gt;Backend option changes&lt;/h2&gt;

&lt;p&gt;This is not really a creature comfort but it still interesting and useful. Both packages are dependent on &lt;code&gt;data.table&lt;/code&gt; to read data into &lt;code&gt;R&lt;/code&gt;. This is down to the amazing speed &lt;code&gt;data.table&lt;/code&gt; offers when reading files into &lt;code&gt;R&lt;/code&gt;. However a new package, with equally impressive read speeds, has come onto the scene called &lt;a href=&#34;https://github.com/r-lib/vroom&#34;&gt;&lt;code&gt;vroom&lt;/code&gt;&lt;/a&gt;. As &lt;code&gt;vroom&lt;/code&gt; has been designed to only read data into &lt;code&gt;R&lt;/code&gt; similarly to &lt;code&gt;readr&lt;/code&gt;, &lt;code&gt;data.table&lt;/code&gt; is still used for all of the heavy lifting. However if a user wishes to use &lt;code&gt;vroom&lt;/code&gt; as the file parser an &lt;code&gt;*_options&lt;/code&gt; function has been created to enable this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nocuta_options(file_parser = c(&amp;quot;data.table&amp;quot;, &amp;quot;vroom&amp;quot;))

# Or 

RAthena__options(file_parser = c(&amp;quot;data.table&amp;quot;, &amp;quot;vroom&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting the file_parser to &lt;code&gt;vroom&lt;/code&gt; then the backend will change to allow &lt;code&gt;vroom&#39;s&lt;/code&gt; file parser to be used instead of &lt;code&gt;data.table&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you aren&amp;rsquo;t sure whether to use &lt;code&gt;vroom&lt;/code&gt; over &lt;code&gt;data.table&lt;/code&gt;, I draw your attention to &lt;code&gt;vroom&lt;/code&gt; boasting a whopping 1.40GB/sec throughput.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Statistics taken from vroom&amp;rsquo;s github readme&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;package&lt;/th&gt;
&lt;th&gt;version&lt;/th&gt;
&lt;th&gt;time (sec)&lt;/th&gt;
&lt;th&gt;speed-up&lt;/th&gt;
&lt;th&gt;throughput&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vroom&lt;/td&gt;
&lt;td&gt;1.1.0&lt;/td&gt;
&lt;td&gt;1.14&lt;/td&gt;
&lt;td&gt;58.44&lt;/td&gt;
&lt;td&gt;1.40 GB/sec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;data.table&lt;/td&gt;
&lt;td&gt;1.12.8&lt;/td&gt;
&lt;td&gt;11.88&lt;/td&gt;
&lt;td&gt;5.62&lt;/td&gt;
&lt;td&gt;134.13 MB/sec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;readr&lt;/td&gt;
&lt;td&gt;1.3.1&lt;/td&gt;
&lt;td&gt;29.02&lt;/td&gt;
&lt;td&gt;2.30&lt;/td&gt;
&lt;td&gt;54.92 MB/sec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;read.delim&lt;/td&gt;
&lt;td&gt;3.6.2&lt;/td&gt;
&lt;td&gt;66.74&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;23.88 MB/sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;rstudio-interface&#34;&gt;RStudio Interface!&lt;/h2&gt;

&lt;p&gt;Due to the ability of &lt;code&gt;AWS Glue&lt;/code&gt; to retrieve metadata for &lt;code&gt;AWS Athena&lt;/code&gt; at speed, it has now been possible to add the interface into RStudio&amp;rsquo;s connection tab. When a connection is established:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
library(RAthena) #Or library(noctua)

con = dbConnect(athena())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The connection icon will as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-02-22-the-next-package-release-into-aws-athena_files/rstudio-con-tab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The AWS region you are connecting to will be reflected in the connection (highlighted above in the red square). This is to help users that are able to connect to multiple different &lt;code&gt;AWS Athena&lt;/code&gt; over different regions.&lt;/p&gt;

&lt;p&gt;Once you have connected &lt;code&gt;AWS Athena&lt;/code&gt;, schema hierarchy will be displayed. In my example you can see some of the tables I have created when testing these packages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/post/2020-02-22-the-next-package-release-into-aws-athena_files/rstudio-con-schema.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For more information around RStudio&amp;rsquo;s connection tab please check out &lt;a href=&#34;https://blog.rstudio.com/2017/08/16/rstudio-preview-connections/&#34;&gt;RStudio preview connections&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;To sum up, the &lt;code&gt;Rathena&lt;/code&gt; and &lt;code&gt;noctua&lt;/code&gt; latest versions have been released to cran with all the new goodies they bring. As these packages are based on AWS SDK&amp;rsquo;s they are highly customisable. Features can easily be added to improve the packages when connecting to &lt;code&gt;AWS Athena&lt;/code&gt;. So please raise any feature requests / bug issues to: &lt;a href=&#34;https://github.com/DyfanJones/RAthena&#34;&gt;https://github.com/DyfanJones/RAthena&lt;/a&gt; and &lt;a href=&#34;https://github.com/DyfanJones/noctua&#34;&gt;https://github.com/DyfanJones/noctua&lt;/a&gt;&lt;/p&gt;
</description>
      
                  <category>R</category>
      
                  <category>Athena</category>
      
                  <category>Boto3</category>
      
                  <category>paws</category>
      
                  <category>Python</category>
      
      
            <category>RBloggers</category>
      
    </item>
    
    <item>
      <title>R Owl of Athena</title>
      <link>/post/r-owl-of-athena/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/r-owl-of-athena/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;RBloggers&lt;/a&gt;|&lt;a href=&#34;https://feeds.feedburner.com/RBloggers&#34;&gt;RBloggers-feedburner&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;intro&#34;&gt;Intro:&lt;/h1&gt;

&lt;p&gt;After developing the package &lt;a href=&#34;https://cran.r-project.org/web/packages/RAthena/index.html&#34;&gt;&lt;code&gt;RAthena&lt;/code&gt;&lt;/a&gt;, I stumbled quite accidentally into the R SDK for AWS &lt;a href=&#34;https://github.com/paws-r/paws&#34;&gt;&lt;code&gt;paws&lt;/code&gt;&lt;/a&gt;. As &lt;code&gt;RAthena&lt;/code&gt; utilises Python&amp;rsquo;s SDK &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html?id=docs_gateway&#34;&gt;&lt;code&gt;boto3&lt;/code&gt;&lt;/a&gt; I thought the development of another AWS Athena package couldn&amp;rsquo;t hurt. As mentioned in my &lt;a href=&#34;https://dyfanjones.me/post/an-amazon-sdk-for-r/&#34;&gt;previous blog&lt;/a&gt; the &lt;code&gt;paws&lt;/code&gt; syntax is very similar to &lt;code&gt;boto3&lt;/code&gt; so alot of my &lt;code&gt;RAthena&lt;/code&gt; code was very portable and this gave me my final excuse to develop my next R package.&lt;/p&gt;

&lt;h1 id=&#34;paws-and-aws-athena&#34;&gt;&lt;code&gt;paws&lt;/code&gt; and AWS Athena:&lt;/h1&gt;

&lt;p&gt;Before getting into the next package, lets first look at how the SDK&amp;rsquo;s interact with AWS Athena.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For example: return all databases in AWS Athena&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# create an AWS Athena object
athena &amp;lt;- paws::athena()

# Submit query to AWS Athena
res &amp;lt;- athena$start_query_execution(
            QueryString = &amp;quot;show Databases&amp;quot;,
            ResultConfiguration = 
                list(OutputLocation = &amp;quot;s3://mybucket/queries/&amp;quot;))

# Get Status of query
result &amp;lt;- athena$get_query_execution(QueryExecutionId = res$QueryExecutionId)

# Return results if query is successful
if(result$QueryExecution$Status$State == &amp;quot;FAILED&amp;quot;) {
  stop(result$QueryExecution$Status$StateChangeReason, call. = FALSE)
} else {output &amp;lt;- 
          athena$get_query_results(
              QueryExecutionId = res$QueryExecutionId,
              MaxResults = 10)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn&amp;rsquo;t the prettiest code when wanting to query AWS Athena with the SQL, in the above example: &lt;code&gt;SHOW DATABASES&lt;/code&gt;. This example only returns the top 10 results. It is even more &amp;ldquo;interesting&amp;rdquo; if you wish to return the entire data frame from AWS Athena. This is where &lt;code&gt;noctua&lt;/code&gt; comes in.&lt;/p&gt;

&lt;h1 id=&#34;noctua&#34;&gt;&lt;code&gt;noctua&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;To start off with I will go through the same 3 questions I went through in my &lt;a href=&#34;https://dyfanjones.me/post/athena-and-r-there-is-another-way/&#34;&gt;Athena and R &amp;hellip; there is another way!?&lt;/a&gt; blog.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is noctua?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; is a R package that creates a &lt;code&gt;DBI&lt;/code&gt; (Database Interface) for R, using the R package &lt;code&gt;DBI&lt;/code&gt; and the R SDK &lt;code&gt;paws&lt;/code&gt; as the backend (so basically the same as &lt;code&gt;RAthena&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why was &lt;code&gt;noctua&lt;/code&gt; created when there are already methods for connecting to Athena?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; was created to provide an extra method to connect to Athena for R users. Plus it seemed natural to create &lt;code&gt;noctua&lt;/code&gt; due to the nature in how it connects to AWS Athena (through a SDK), which is the method &lt;code&gt;RAthena&lt;/code&gt; connects to AWS Athena.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why is &lt;code&gt;noctua&lt;/code&gt; called &lt;code&gt;noctua&lt;/code&gt;?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a tricky one as &lt;code&gt;RAthena&lt;/code&gt; was already taken. So I looked for a historic reference to link the new package to AWS Athena. I settled on &lt;code&gt;noctua&lt;/code&gt; due to: &lt;a href=&#34;https://en.wikipedia.org/wiki/Athena&#34;&gt;Athena/Minerva&lt;/a&gt; is the Greek/Roman god of wisdom, handicraft, and warfare. One of the main symbols for Athena is the Owl. Noctua is the latin word for Owl.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;how-to-install&#34;&gt;How to install:&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; is currently on the CRAN and Github:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CRAN version:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;noctua&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Github development version:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;remotes::install_github(&amp;quot;dyfanjones/noctua&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage:&lt;/h1&gt;

&lt;p&gt;As with all &lt;code&gt;DBI&lt;/code&gt; interface packages the key functions are exactly the same. Which means that there is little to no upskilling required. The only difference between each method is how they connect and send data back to the database. So we will focus mainly on those two aspects.&lt;/p&gt;

&lt;h2 id=&#34;connecting-to-aws-athena&#34;&gt;Connecting to AWS Athena:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; offers a wide range of connection methods from hard coding to using Amazon Resource Name Roles (ARN roles). Which is very similar to the &lt;code&gt;RAthena&lt;/code&gt; package.&lt;/p&gt;

&lt;h3 id=&#34;hard-coding-method&#34;&gt;Hard-Coding Method:&lt;/h3&gt;

&lt;p&gt;This method isn&amp;rsquo;t recommended as your credentials are hard-coded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena(),
                 aws_access_key_id = &amp;quot;YOUR AWS KEY ID&amp;quot;,
                 aws_secret_access_key = &amp;quot;YOUR SECRET ACCESS KEY&amp;quot;,
                 s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;&lt;code&gt;s3_staging_dir&lt;/code&gt; requires to be in the format of &lt;code&gt;s3 uri&lt;/code&gt; for example &amp;ldquo;s3://path/to/query/bucket/&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you do not wish to create AWS Profiles then setting environmental variables would be the recommended method.&lt;/p&gt;

&lt;h3 id=&#34;environment-variable-method&#34;&gt;Environment Variable Method:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; supports &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html&#34;&gt;AWS credentials&lt;/a&gt; when set into the environment variables to avoid hard-coding. From what I have found out, an easy way to set up environment variables (that persists) in R is to use the &lt;code&gt;file.edit&lt;/code&gt; function like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file.edit(&amp;quot;~/.Renviron&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you can simply add in your environment variables in the file you are editing for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID = YOUR AWS KEY ID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have set your environment variables you can connect to Athena in the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena(),
                 s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can set the &lt;code&gt;s3_staging_dir&lt;/code&gt; parameter as an environmental variable, to do this you need to set the following environmental variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ATHENA_S3_STAGING_DIR = s3://path/to/query/bucket/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows for the following connection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;aws-profile-names&#34;&gt;AWS Profile Names:&lt;/h3&gt;

&lt;p&gt;Another method is to use AWS Profile Names. AWS profile names can be setup either manually in the &lt;code&gt;~/.aws&lt;/code&gt; directory or by using the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html&#34;&gt;AWS Command Line Interface (AWS CLI)&lt;/a&gt;. Once you have setup your profile name you can connect to AWS Athena:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Default Profile Name:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using Non-Default Profile Name:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena(),
                 profile_name = &amp;quot;rathena&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arn-roles&#34;&gt;ARN Roles:&lt;/h3&gt;

&lt;p&gt;ARN roles are fairly useful if you need to assume a role that can connect to another AWS account and use the AWS Athena in that account. Or whether you want to create a temporary connection with different permissions than your current role (&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&#34;&gt;AWS ARN Documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assuming ARN role credentials before connecting to AWS Athena:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(noctua)
library(DBI)
assume_role(profile_name = &amp;quot;YOUR_PROFILE_NAME&amp;quot;,
            role_arn = &amp;quot;arn:aws:sts::123456789012:assumed-role/role_name/role_session_name&amp;quot;,
            set_env = TRUE)

# Connect to Athena using ARN Role
con &amp;lt;- dbConnect(athena(),
                s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Connect to AWS Athena directly using ARN role:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(noctua::athena(),
                  profile_name = &amp;quot;YOUR_PROFILE_NAME&amp;quot;,
                  role_arn = &amp;quot;arn:aws:sts::123456789012:assumed-role/role_name/role_session_name&amp;quot;,
                  s3_staging_dir = &#39;s3://path/to/query/bucket/&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;ARN Roles have a duration timer before they will expire. To change the default you can increase the &lt;code&gt;duration_seconds&lt;/code&gt; parameter from the default 3600 seconds (1 hour).&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;temporary-sessions&#34;&gt;Temporary Sessions:&lt;/h3&gt;

&lt;p&gt;Finally you can create temporary credentials before connecting to AWS Athena:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(noctua)
library(DBI)

# Create Temporary Credentials duration 1 hour
get_session_token(&amp;quot;YOUR_PROFILE_NAME&amp;quot;,
                  serial_number=&#39;arn:aws:iam::123456789012:mfa/user&#39;,
                  token_code = &amp;quot;531602&amp;quot;,
                  set_env = TRUE)

# Connect to Athena using temporary credentials
con &amp;lt;- dbConnect(athena(),
                s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This method will work for users who have set up &lt;a href=&#34;https://aws.amazon.com/iam/details/mfa/&#34;&gt;Multi-Factor Authentication&lt;/a&gt; (MFA).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;querying&#34;&gt;Querying:&lt;/h2&gt;

&lt;p&gt;To query AWS Athena using the &lt;code&gt;noctua&lt;/code&gt; it is very similar to querying any other &lt;code&gt;DBI&lt;/code&gt; database method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(DBI)

con &amp;lt;- dbConnect(noctua::athena())

dbGetQuery(con, &amp;quot;show databases&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is it! So if we look back at the initial &lt;code&gt;paws&lt;/code&gt; code when working with AWS Athena. The code was very intimidating when wanting to do basic AWS Athena queries. &lt;code&gt;noctua&lt;/code&gt; packages all that up and makes it super easy to work with.&lt;/p&gt;

&lt;h2 id=&#34;uploading-data&#34;&gt;Uploading Data:&lt;/h2&gt;

&lt;p&gt;It is all very well querying data from AWS Athena but what is more useful is to upload data as well. &lt;code&gt;noctua&lt;/code&gt; has addressed this and implemented a method in &lt;code&gt;dbWriteTable&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbWriteTable(con, &amp;quot;mtcars&amp;quot;, mtcars,
             partition=c(&amp;quot;TIMESTAMP&amp;quot; = format(Sys.Date(), &amp;quot;%Y%m%d&amp;quot;)),
             s3.location = &amp;quot;s3://mybucket/data/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have uploaded data into &lt;code&gt;AWS Athena&lt;/code&gt; you can query it in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbGetQuery(con, &amp;quot;select * from mtcars&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are all variable parameters for the &lt;code&gt;dbWriteTable&lt;/code&gt; method:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;conn:&lt;/strong&gt; An AthenaConnection object, produced by dbConnect()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name:&lt;/strong&gt; A character string specifying a table name. Names will be automatically quoted so you can use any sequence of characters, not just any valid bare table name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value:&lt;/strong&gt; A data.frame to write to the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;overwrite:&lt;/strong&gt; Allow overwriting the destination table. Cannot be &amp;lsquo;TRUE&amp;rsquo; if &amp;lsquo;append&amp;rsquo; is also &amp;lsquo;TRUE&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;append:&lt;/strong&gt; Allow appending to the destination table. Cannot be &amp;lsquo;TRUE&amp;rsquo; if &amp;lsquo;overwrite&amp;rsquo; is also &amp;lsquo;TRUE&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;row.names:&lt;/strong&gt; Either TRUE, FALSE, NA or a string. If TRUE, always translate row names to a column called &amp;ldquo;row_names&amp;rdquo;. If FALSE, never translate row names. If NA, translate rownames only if they&amp;rsquo;re a character vector. A string is equivalent to TRUE, but allows you to override the default name. For backward compatibility, NULL is equivalent to FALSE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;field.types:&lt;/strong&gt; Additional field types used to override derived types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partition:&lt;/strong&gt; Partition Athena table (needs to be a named list or vector) for example: c(var1 = &amp;ldquo;2019-20-13&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;s3.location&lt;/strong&gt; s3 bucket to store Athena table, must be set as a s3 uri for example (&amp;ldquo;s3://mybucket/data/&amp;ldquo;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;file.type:&lt;/strong&gt; What file type to store data.frame on s3, RAthena currently supports [&amp;ldquo;csv&amp;rdquo;, &amp;ldquo;tsv&amp;rdquo;, &amp;ldquo;parquet&amp;rdquo;]. &lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;file.type &amp;ldquo;parquet&amp;rdquo; is supported by R package &lt;a href=&#34;https://github.com/apache/arrow/tree/master/r&#34;&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt; and will need to be installed separately if you wish to upload data.frames in &amp;ldquo;parquet&amp;rdquo; format.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;:&lt;/strong&gt; Other arguments used by individual methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;noctua&lt;/code&gt; is a package that gives R users the access to AWS Athena using the R AWS SDK &lt;code&gt;paws&lt;/code&gt;. Thus no external software is required and it can all be installed from the CRAN. If you are interested in how to connect R to AWS Athena please check out &lt;a href=&#34;https://cran.r-project.org/web/packages/RAthena/index.html&#34;&gt;&lt;code&gt;RAthena&lt;/code&gt;&lt;/a&gt; as well (my other AWS Athena connectivity R package). All feature requests/ suggestions/issues are welcome please add them to: &lt;a href=&#34;https://github.com/DyfanJones/noctua/issues&#34;&gt;Github Issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally please star the github repositories if you like the work that has been done with R and AWS Athena &lt;a href=&#34;https://github.com/DyfanJones/noctua&#34;&gt;&lt;code&gt;noctua&lt;/code&gt;&lt;/a&gt; , &lt;a href=&#34;https://github.com/DyfanJones/RAthena&#34;&gt;&lt;code&gt;RAthena&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      
                  <category>R</category>
      
                  <category>paws</category>
      
                  <category>Athena</category>
      
      
            <category>RBloggers</category>
      
    </item>
    
    <item>
      <title>RAthena 1.3.0 has arrived</title>
      <link>/post/rathena-1-3-0-has-arrived/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/rathena-1-3-0-has-arrived/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;RBloggers&lt;/a&gt;|&lt;a href=&#34;https://feeds.feedburner.com/RBloggers&#34;&gt;RBloggers-feedburner&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;recap&#34;&gt;Recap:&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/DyfanJones/RAthena&#34;&gt;&lt;code&gt;RAthena&lt;/code&gt;&lt;/a&gt; is a R package that interfaces into Amazon Athena. However, it doesn&amp;rsquo;t use the standard &lt;code&gt;ODBC&lt;/code&gt; and &lt;code&gt;JDBC&lt;/code&gt; drivers like &lt;code&gt;AWR.Athena&lt;/code&gt; and &lt;code&gt;metis&lt;/code&gt;. Instead &lt;code&gt;RAthena&lt;/code&gt; utilises Python&amp;rsquo;s SDK (software development kit) into Amazon, &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html&#34;&gt;&lt;code&gt;Boto3&lt;/code&gt;&lt;/a&gt;. It does this by using the &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;&lt;code&gt;reticulate&lt;/code&gt;&lt;/a&gt; package that provides an interface into Python. What this means is that &lt;code&gt;RAthena&lt;/code&gt; doesn&amp;rsquo;t require any driver installation or setup. That can be particularly difficult when you are considering setting up the ODBC drivers and you are not familiar with how ODBC works on your current operating system. If you wish to use ODBC, RStudio has provided a good user guide &lt;a href=&#34;https://db.rstudio.com/best-practices/drivers/&#34;&gt;Setting up ODBC Drivers&lt;/a&gt; to help set up ODBC drivers on your system. However if you do not wish to go down that route &lt;code&gt;RAthena&lt;/code&gt; might be a good option for you.&lt;/p&gt;

&lt;h1 id=&#34;new-features-in-rathena&#34;&gt;New Features in &lt;code&gt;RAthena&lt;/code&gt;:&lt;/h1&gt;

&lt;p&gt;Anyway, getting back to &lt;code&gt;RAthena&lt;/code&gt; and what does the new update provide. One of the key changes in &lt;code&gt;RAthena&lt;/code&gt; is the method of transferring data to and from AWS Athena. &lt;code&gt;RAthena&lt;/code&gt; now utilising &lt;a href=&#34;https://rdatatable.gitlab.io/data.table/&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt; for this process. The reason for this change is the raw speed &lt;code&gt;data.table&lt;/code&gt;. When transferring data to and from AWS Athena the last thing you want is a bottle neck in R just preparing the data before it even transfers it to AWS Athena. This bottle neck can easily be 50 - 100x longer without the use of &lt;code&gt;data.table&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next change is &lt;code&gt;bigint&lt;/code&gt;, and how it is converted from AWS Athena to R. In the past &lt;code&gt;RAthena&lt;/code&gt; would just convert &lt;code&gt;integer64&lt;/code&gt; to &lt;code&gt;bigint&lt;/code&gt; when writing to AWS Athena, however it would then convert &lt;code&gt;bigint&lt;/code&gt; back into R as a normal &lt;code&gt;integer&lt;/code&gt;. Which means it is constrained to 32-bit integers. This has now been fixed. When reading &lt;code&gt;bigint&lt;/code&gt; from AWS Athena &lt;code&gt;RAthena&lt;/code&gt; will now convert it into &lt;code&gt;integer64&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;sum-up&#34;&gt;Sum Up:&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;RAthena&lt;/code&gt; now provides a faster method in reading and writing data from AWS Athena (thanks &lt;code&gt;data.table&lt;/code&gt;). With the correct handling of AWS Athena &lt;code&gt;bigint&lt;/code&gt;. So please give &lt;code&gt;RAthena&lt;/code&gt; a try and let me know what you think of the package. Suggestions/Bugs/Enhancements are always welcome and they will help the package to improve: &lt;a href=&#34;https://github.com/DyfanJones/RAthena/issues&#34;&gt;https://github.com/DyfanJones/RAthena/issues&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation-methods&#34;&gt;Installation methods:&lt;/h2&gt;

&lt;p&gt;Just in case you are not aware &lt;a href=&#34;https://cran.r-project.org/web/packages/RAthena/index.html&#34;&gt;&lt;code&gt;Rathena&lt;/code&gt;&lt;/a&gt; is available on the CRAN and GitHub.&lt;/p&gt;

&lt;p&gt;CRAN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;RAthena&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GitHub development version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;remotes::install_github(&amp;quot;dyfanjones/RAthena&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
      
                  <category>R</category>
      
                  <category>Athena</category>
      
                  <category>Boto3</category>
      
                  <category>Python</category>
      
      
            <category>RBloggers</category>
      
    </item>
    
    <item>
      <title>Athena and R ... there is another way!?</title>
      <link>/post/athena-and-r-there-is-another-way/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/athena-and-r-there-is-another-way/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.r-bloggers.com&#34;&gt;RBloggers&lt;/a&gt;|&lt;a href=&#34;https://feeds.feedburner.com/RBloggers&#34;&gt;RBloggers-feedburner&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;intro&#34;&gt;Intro:&lt;/h1&gt;

&lt;p&gt;Currently there are two key ways in connecting to Amazon Athena from R, using the &lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/connect-with-odbc.html&#34;&gt;ODBC&lt;/a&gt; and &lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html&#34;&gt;JDBC&lt;/a&gt; drivers. To access the ODBC driver R users can use the excellent &lt;a href=&#34;https://github.com/r-dbi/odbc&#34;&gt;odbc package&lt;/a&gt; supported by Rstudio. To access the JDBC driver R users can either use the &lt;a href=&#34;https://cran.r-project.org/web/packages/RJDBC/index.html&#34;&gt;RJDBC&lt;/a&gt; R package or the helpful wrapper package &lt;a href=&#34;https://github.com/nfultz/AWR.Athena&#34;&gt;AWR.Athena&lt;/a&gt; which wraps the &lt;code&gt;RJDBC&lt;/code&gt; package to make the connection to Amazon Athena through the JDBC driver simpler. These methods are an excellent way for R to connect to Amazon Athena, however is there another way?&lt;/p&gt;

&lt;p&gt;Well glad you asked&amp;hellip;yes there is! Ever since the &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;reticulate package&lt;/a&gt; was developed (by Rstudio) the interface into Python from R has never been simpler. This makes another route into Athena possible! Amazon has developed a Python software development kit (SDK) called &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html?id=docs_gateway&#34;&gt;Boto3&lt;/a&gt;. By using &lt;code&gt;boto3&lt;/code&gt; in combination with the R package &lt;code&gt;reticulate&lt;/code&gt; a new method into accessing Athena can be made possible. Introducing the R package &lt;a href=&#34;https://dyfanjones.github.io/RAthena/&#34;&gt;RAthena&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;rathena&#34;&gt;RAthena:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is RAthena?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Rathena&lt;/code&gt; is a R package that creates a DBI (Database Interface) for R, using the R package &lt;a href=&#34;https://dbi.r-dbi.org/&#34;&gt;DBI&lt;/a&gt; and the Python package &lt;code&gt;Boto3&lt;/code&gt; as the backend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why was RAthena created when there are already methods for connecting to Athena?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RAthena&lt;/code&gt; was created to provide an extra method to connect to Athena for R users. Nothing more, nothing less.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why is RAthena call RAthena?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Isn&amp;rsquo;t it obvious? Most R packages that interface with a database are called &lt;code&gt;&amp;quot;R&amp;lt;database&amp;gt;&amp;quot;&lt;/code&gt; for example &lt;code&gt;RSQLite&lt;/code&gt;, &lt;code&gt;RPostgreSQL&lt;/code&gt;, etc&amp;hellip; Plus this package is &amp;ldquo;roughly&amp;rdquo; the R equivalent to the superb &lt;code&gt;Python&lt;/code&gt; package &lt;a href=&#34;https://github.com/laughingman7743/PyAthena&#34;&gt;PyAthena&lt;/a&gt;. So calling this package &lt;code&gt;RAthena&lt;/code&gt; seems like the best choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started:&lt;/h1&gt;

&lt;p&gt;Now lets get into how to actually use &lt;code&gt;RAthena&lt;/code&gt;. I am going to skip over the part were you have to set up an &lt;a href=&#34;https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/&#34;&gt;Amazon Web Services Account&lt;/a&gt; (AWS Acount) and get straight into the good stuff.&lt;/p&gt;

&lt;p&gt;Before working with &lt;code&gt;RAthena&lt;/code&gt;, &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3+&lt;/a&gt; is require. Please install it directly or use the &lt;a href=&#34;https://www.anaconda.com/distribution/&#34;&gt;Anaconda Distribution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we have &lt;code&gt;Python 3+&lt;/code&gt; we now need to install &lt;code&gt;Boto3&lt;/code&gt;. If you installed &lt;code&gt;Python 3+&lt;/code&gt; with the Anaconda Distribution I believe &lt;code&gt;Boto3&lt;/code&gt; comes as standard (you can skip &lt;code&gt;boto3&lt;/code&gt; installation step), but for everyone else you can install &lt;code&gt;Boto3&lt;/code&gt; either by the &lt;code&gt;pip&lt;/code&gt; command or the inbuilt installation function in &lt;code&gt;RAthena&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pip command:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install boto3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Install &lt;code&gt;RAthena&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&amp;quot;dyfanjones/rathena&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;RAthena&lt;/code&gt; boto3 installation function:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;RAthena::install_boto()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&#34;connecting-to-athena&#34;&gt;Connecting to Athena&lt;/h2&gt;

&lt;p&gt;Now we have everything that is required we are now ready to connect to &lt;code&gt;Athena&lt;/code&gt;. &lt;code&gt;RAthena&lt;/code&gt; provides several method to connect to &lt;code&gt;Athena&lt;/code&gt; ranging from hard-coding credentials to using Amazon Resource Name Roles (ARN roles).&lt;/p&gt;

&lt;h3 id=&#34;hard-coding-method&#34;&gt;Hard-Coding Method:&lt;/h3&gt;

&lt;p&gt;This method isn&amp;rsquo;t recommended as your credentials are hard-coded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(RAthena::athena(),
                 aws_access_key_id = &amp;quot;YOUR AWS KEY ID&amp;quot;,
                 aws_secret_access_key = &amp;quot;YOUR SECRET ACCESS KEY&amp;quot;,
                 s3_staging_dir = &amp;quot;LOCATION FOR ATHENA QUERY OUTPUT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;&lt;code&gt;s3_staging_dir&lt;/code&gt; requires to be in the format of &lt;code&gt;s3 uri&lt;/code&gt; for example &amp;ldquo;s3://path/to/query/bucket/&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;environment-variable-method&#34;&gt;Environment Variable Method:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;RAthena&lt;/code&gt; supports &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html&#34;&gt;AWS credentials&lt;/a&gt; set into the environment variables to avoid hard-coding. From what I have found out an easy way to set up environment variables (that persists) in R is to use the &lt;code&gt;file.edit&lt;/code&gt; function like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file.edit(&amp;quot;~/.Renviron&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you can simply add in your environment variables in the file you are editing for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID = &amp;lt;YOUR AWS KEY ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have set your environment variables you can connect to Athena in the following method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(RAthena::athena(),
                 s3_staging_dir = &amp;quot;LOCATION FOR ATHENA QUERY OUTPUT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;aws-profile-names&#34;&gt;AWS Profile Names:&lt;/h3&gt;

&lt;p&gt;Another method is to use AWS Profile Names. AWS profile names can be setup either manually in the &lt;code&gt;~/.aws&lt;/code&gt; directory or by using the &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html&#34;&gt;AWS Command Line Interface (AWS CLI)&lt;/a&gt;. Once you have setup your profile name you can connect to &lt;code&gt;Athena&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Default Profile Name:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(RAthena::athena(),
                 s3_staging_dir = &amp;quot;LOCATION FOR ATHENA QUERY OUTPUT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Using Non-Default Profile Name:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(RAthena::athena(),
                 profile_name = &amp;quot;rathena&amp;quot;,
                 s3_staging_dir = &amp;quot;LOCATION FOR ATHENA QUERY OUTPUT&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;arn-roles&#34;&gt;ARN Roles:&lt;/h3&gt;

&lt;p&gt;ARN roles are fairly useful if you need to assume a role that can connect to another AWS account and use the &lt;code&gt;Athena&lt;/code&gt; in that account. Or whether you want to create a temporary connection with different permissions than your current role (&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/tutorial_cross-account-with-roles.html&#34;&gt;AWS ARN Documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assuming ARN role credentials before connecting to Athena:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RAthena)
library(DBI)
assume_role(profile_name = &amp;quot;YOUR_PROFILE_NAME&amp;quot;,
            role_arn = &amp;quot;arn:aws:sts::123456789012:assumed-role/role_name/role_session_name&amp;quot;,
            set_env = TRUE)

# Connect to Athena using ARN Role
con &amp;lt;- dbConnect(athena(),
                s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Connect to Athena directly using ARN role:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
con &amp;lt;- dbConnect(athena(),
                  profile_name = &amp;quot;YOUR_PROFILE_NAME&amp;quot;,
                  role_arn = &amp;quot;arn:aws:sts::123456789012:assumed-role/role_name/role_session_name&amp;quot;,
                  s3_staging_dir = &#39;s3://path/to/query/bucket/&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;ARN Roles have a duration timer before they will expire. To change the default you can increase the &lt;code&gt;duration_seconds&lt;/code&gt; parameter from the default 3600 seconds (1 hour).&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;temporary-sessions&#34;&gt;Temporary Sessions:&lt;/h3&gt;

&lt;p&gt;Finally you can create temporary credentials before connecting to &lt;code&gt;Athena&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RAthena)
library(DBI)

# Create Temporary Credentials duration 1 hour
get_session_token(&amp;quot;YOUR_PROFILE_NAME&amp;quot;,
                  serial_number=&#39;arn:aws:iam::123456789012:mfa/user&#39;,
                  token_code = &amp;quot;531602&amp;quot;,
                  set_env = TRUE)

# Connect to Athena using temporary credentials
con &amp;lt;- dbConnect(athena(),
                s3_staging_dir = &amp;quot;s3://path/to/query/bucket/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;This method will work for users who have set up &lt;a href=&#34;https://aws.amazon.com/iam/details/mfa/&#34;&gt;Multi-Factor Authentication&lt;/a&gt; (MFA).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;Now we have created a connection to &lt;code&gt;Athena&lt;/code&gt; we can ulitise &lt;code&gt;DBI&lt;/code&gt; methods to query &lt;code&gt;Athena&lt;/code&gt; for example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All available tables in Athena:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbListTables(con)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Send Query to Athena&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- dbSendQuery(con, &amp;quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&amp;quot;)
dbFetch(res)
dbClearResult(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- dbExecute(con, &amp;quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&amp;quot;)
dbFetch(res)
dbClearResult(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or &amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dbGetQuery&lt;/code&gt; wraps sending, fetching and clearing results in one easy step.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbGetQuery(con, &amp;quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;You might of noticed that if you have &lt;code&gt;data.table&lt;/code&gt; installed, &lt;code&gt;RAthena&lt;/code&gt; will attempt to return the data as a &lt;code&gt;data.table&lt;/code&gt;. This is to improve speed when larger queries are returned from &lt;code&gt;Athena&lt;/code&gt;. If you don&amp;rsquo;t have &lt;code&gt;data.table&lt;/code&gt;, &lt;code&gt;RAthena&lt;/code&gt; will return the output as a &lt;code&gt;data.frame&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get Column information&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- dbSendQuery(con, &amp;quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&amp;quot;)
dbColumnInfo(res)
dbClearResult(res)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn about what &lt;code&gt;DBI&lt;/code&gt; methods have been implemented in &lt;code&gt;RAthena&lt;/code&gt; please refer to: &lt;a href=&#34;https://dyfanjones.github.io/RAthena/&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;intermediate-usage&#34;&gt;Intermediate Usage:&lt;/h2&gt;

&lt;p&gt;It is all very well querying data from &lt;code&gt;Athena&lt;/code&gt; but what is more useful is to upload data as well. &lt;code&gt;RAthena&lt;/code&gt; has addressed this and implemented a method in &lt;code&gt;dbWriteTable&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbWriteTable(con, &amp;quot;mtcars&amp;quot;, mtcars,
             partition=c(&amp;quot;TIMESTAMP&amp;quot; = format(Sys.Date(), &amp;quot;%Y%m%d&amp;quot;)),
             s3.location = &amp;quot;s3://mybucket/data/&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have uploaded data into &lt;code&gt;Athena&lt;/code&gt; you can query it in the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dbGetQuery(con, &amp;quot;select * from mtcars&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are all variable parameters for the &lt;code&gt;dbWriteTable&lt;/code&gt; method:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;conn:&lt;/strong&gt; An AthenaConnection object, produced by dbConnect()&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;name:&lt;/strong&gt; A character string specifying a table name. Names will be automatically quoted so you can use any sequence of characters, not just any valid bare table name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value:&lt;/strong&gt; A data.frame to write to the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;overwrite:&lt;/strong&gt; Allow overwriting the destination table. Cannot be &amp;lsquo;TRUE&amp;rsquo; if &amp;lsquo;append&amp;rsquo; is also &amp;lsquo;TRUE&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;append:&lt;/strong&gt; Allow appending to the destination table. Cannot be &amp;lsquo;TRUE&amp;rsquo; if &amp;lsquo;overwrite&amp;rsquo; is also &amp;lsquo;TRUE&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;row.names:&lt;/strong&gt; Either TRUE, FALSE, NA or a string. If TRUE, always translate row names to a column called &amp;ldquo;row_names&amp;rdquo;. If FALSE, never translate row names. If NA, translate rownames only if they&amp;rsquo;re a character vector. A string is equivalent to TRUE, but allows you to override the default name. For backward compatibility, NULL is equivalent to FALSE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;field.types:&lt;/strong&gt; Additional field types used to override derived types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partition:&lt;/strong&gt; Partition Athena table (needs to be a named list or vector) for example: c(var1 = &amp;ldquo;2019-20-13&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;s3.location&lt;/strong&gt; s3 bucket to store Athena table, must be set as a s3 uri for example (&amp;ldquo;s3://mybucket/data/&amp;ldquo;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;file.type:&lt;/strong&gt; What file type to store data.frame on s3, RAthena currently supports [&amp;ldquo;csv&amp;rdquo;, &amp;ldquo;tsv&amp;rdquo;, &amp;ldquo;parquet&amp;rdquo;]. &lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;file.type &amp;ldquo;parquet&amp;rdquo; is supported by R package &lt;a href=&#34;https://github.com/apache/arrow/tree/master/r&#34;&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt; and will need to be installed separately if you wish to upload data.frames in &amp;ldquo;parquet&amp;rdquo; format.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;hellip;:&lt;/strong&gt; Other arguments used by individual methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;tidyverse-usage&#34;&gt;Tidyverse Usage:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;RAthena&lt;/code&gt; can integrate with the famous R package &lt;a href=&#34;https://github.com/tidyverse/dplyr&#34;&gt;dplyr&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)
library(dplyr)

con &amp;lt;- dbConnect(RAthena::athena(),
                 profile_name = &amp;quot;rathena&amp;quot;,
                 s3_staging_dir = &amp;quot;LOCATION FOR ATHENA QUERY OUTPUT&amp;quot;)

tbl(con, sql(&amp;quot;SELECT * FROM INFORMATION_SCHEMA.COLUMNS&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you have already uploaded a table into &lt;code&gt;Athena&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tbl(con, &amp;quot;mtcars&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h1&gt;

&lt;p&gt;So hopefully this has given you an insight into the up coming package &lt;code&gt;RAthena&lt;/code&gt; and it&amp;rsquo;s usefulness. This package is not meant to replace any of the other packages that connect into &lt;code&gt;Athena&lt;/code&gt; but give another route into &lt;code&gt;Athena&lt;/code&gt; for R users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final note:&lt;/strong&gt; &lt;code&gt;RAthena&lt;/code&gt; offers a lot more functionality please check it out at &lt;a href=&#34;https://github.com/DyfanJones/RAthena&#34;&gt;Github&lt;/a&gt;. If you have any suggestions please raise an issue at &lt;a href=&#34;https://github.com/DyfanJones/RAthena/issues&#34;&gt;Github Issues&lt;/a&gt;.&lt;/p&gt;
</description>
      
                  <category>R</category>
      
                  <category>Athena</category>
      
                  <category>Boto3</category>
      
                  <category>Python</category>
      
      
            <category>RBloggers</category>
      
    </item>
    
  </channel>
</rss>